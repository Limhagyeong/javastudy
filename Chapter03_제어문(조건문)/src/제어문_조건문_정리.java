/*
 *   3P => 자바 실행 환경
 *   22P => 들여쓰기 
 *   23P => 주석
 *   --------------------------
 *   약속
 *    => 1. class명은 대문자로 시작한다
 *       2. 변수는 소문자로 시작한다
 *       3. 상수는 전체를 대문자로 써준다 MAX_VALUE
 *      ---------------------------
 *   2장 => 프로그램 기초
 *   1) 25P => 변수
 *      => 메모리에 한개의 데이터를 저장하는 공간의 이름
 *         ----- 메모리는 주소로 되어있기 때문에 별칭 부여
 *   2) 형식
 *      데이터형(메모리 크기) 변수명;
 *      -----
 *       저장할 수 있는 공간 : 정수 / 실수 / 논리 / 문자 => 기본형
 *       정수 저장 공간
 *       ----------
 *          byte = -128~127 (네트워크 송수신, 파일 읽기, 파일 쓰기, 사이트 검색...)
 *          자바 검색 주소 중,  https://www.google.com/search?q=%EC%9E%90%EB%B0%94 => byte값
 *                                                          ------------------- "자바" (한글 => byte => char로 변환되어 검색들어감)
 *          int = -21억 4천 ~ 21억 4천
 *          => default값이기 때문에 컴퓨터가 인식하는 숫자는 int이다

 *          long = 
 *          => int와 long => (100000000000L)
 *          
 *       실수 저장 공간
 *       -----------
 *          double = 8byte / 소수점 15자리까지 표현
 *          
 *       문자 저장 공간
 *       -----------
 *         char = 2byte => 0~65535 => 문자번호 (
 *                ----- 멀티바이트 => 유니코드
 *                
 *       true/false 저장 공간
 *       ------------------
 *         boolean = 1byte
 *         --------------------------------------------------------------------> 30P   
 *          * byte<char<int<long<double
 *          
 *       변수의 명명법(메소드, 클래스, 인터페이스..적용) : 식별자
 *       ---------
 *       1) 알파벳이나 한글로 시작
 *       2) 대소문자 구분
 *       3) 공백 X
 *       4) 숫자사용가능 (맨앞에는 불가)
 *       5) 특수문자 사용 가능 ($ , _)
 *       6) 키워드 사용 불가 (class, int ... / 이미 사용중인 단어)
 *       ----------------------------------------------------------------------> 26P
 *       38P 연산자
 *       ---------
 *       단항연산자 : 증감연산자 (++, --) , 부정연산자 (!) ,  형변환연산자 (데이터형)
 *       이항연산자 : 산술연산자 (+,-,/,*,%) 비교연산자 ( ==, !=, < , > , <= , >=) 논리연산자 ( && , ||) 대입연산자 ( =,+=,-+)
 *       삼항연산자 : (조건)?값:값 => if~else로 변환하여 표현 가능함
 *       
 *       -------------------------------------------------------------------------
 *       54P 제어문
 *       ---------
 *        자바에서 제공하는 제어문
 *        조건문 
 *          = 단일 조건문 : 독립적으로 사용 => 해당되는 조건이 많은 경우 (54P)
 *             
 *             형식)
 *             
 *                 if (조건문)
 *                  {
 *                     조건이 true일 때 수행
 *                  }
 *                  ==> false이면 건너뛰고 다음 if 수행
 *                  
 *          = 선택 조건문 : true와 false를 나눠서 처리 (56P)
 *          
 *           형식)
 *             
 *                 if (조건문) => 조건 (비교연산자, 부정연산자, 논리연산자 사용만 가능)
 *                  {
 *                     조건이 true일 때 수행
 *                  }
 *                  else
 *                  {
 *                    조건이 false일 때 수행
 *                  }
 *          
 *          = 다중 조건문 : 여러개의 조건문을 나열 => 해당 조건 한개만 수행이 가능하게 만든다 (58P)   
 *          
 *           형식)
 *             
 *                 if (조건문)
 *                  {
 *                     조건이 true일 때 수행 => 종료
 *                     조건이 false일 때 => 아래 조건으로 이동
 *                  }
 *                  else if (조건문)
 *                  {
 *                     조건이 true일 때 수행 => 종료
 *                     조건이 false일 때 => 아래 조건으로 이동
 *                  }
 *                  ...
 *                  ...
 *                  else // 생략가능
 *                  {
 *                      조건이 없을 때 수행
 *                  }                 
 *          = 선택문
 *          
 *        반복문
 *          = for : 횟수 지정
 *          = while : 횟수 미지정 => 파일이 끝날 때까지 수행, 오라클 저장 데이터 전부를 수행 => 수행하지 않을 수도 있음
 *          = do ~ while : 반드시 한 번 이상을 수행한다
 *          
 *        반복제어문
 *        ----------------------------------
 *          = break : 반복종료 (예외 => Switch~case)
 *          = continue : 특정부분 제외
 *       ----------------------------------- 반복문에서만 사용이 가능
 *       
 *       
 */     
public class 제어문_조건문_정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(100000000000000000l);

	}

}
