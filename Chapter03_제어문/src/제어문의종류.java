// 54P
/*
 *  변수 => 저장(데이터)
 *  연산자 => 결과값 , 사용처, 형식
 *  제어문 => 흐름파악 (동작구조) , 사용처 , 형식
 *  
 *   1. 제어문의 종류 
 *      ***** 제어문은 무조건 1개의 문장만 수행한다 ******
 *          1) if(조건문)
 *            문장 1  ===> 제어 가능 (if절 문장)
 *            문장 2  ===> 제어 불가 (일반 문장)
 *           
 *          2) if (조건문)  ==> 모든 문장 제어 하려면 {}
 *            {
 *               문장1
 *               문장2
 *            }
 *           
 *      = 조건문
 *        = 단일 조건문
 *          형식) 
 *               if(조건문) => 조건문 (비교연산자, 논리연산자, 부정연산자) => true / false
 *                {
 *                     조건문이 true일 경우에 수행할 문장
 *                }
 *                
 *                => 명령문을 제어한다 (수행 여부 제어 가능)
 *                => 단점 : 속도가 느려진다 (단일 조건문 여러개 사용 시)
 *                => 한개가 독립문장이기 때문에 단일 조건문 사용 시 모든 문장을 각 처리하기 때문!
 *                => 중복이 있는 경우 사용 가능
 *                   1~100까지 중에 3,5,7의 배수 추출 => 단일 조건문 3개를 만들어줘야함 (중복이 있기 때문)
 *                   
 *        = 선택 조건문 : true와 false를 나눠서 작업
 *             ===> 삼항연산자
 *          형식)
 *               if(조건문)
 *               {
 *                 조건문이 true 일 때
 *               }
 *               else
 *               {
 *                 조건문이 false 일 때
 *               }
 *               
 *        = 다중 조건문 : 한번만 수행할 때 주로 사용 (중복이 없을 때) / 모든 문장 연결되어있기때문에 하나의 true값만 구하면 됨
 *            => 계산기 : + , - , * , / 의 각 값을 출력 but, /와% 같이 구하려면 문제 생김 (false 마지막 문장으로 출력됨)
 *            
 *           형식)
 *               if(조건문)
 *               {
 *                 조건문이  true면 수행하는 문장 ==> end (false 문장은 수행X)
 *                 false면 조건문1 수행
 *               }
 *               else if(조건문1)
 *               {
 *                 false면 조건문2 수행
 *               }
 *               
 *               else if(조건문2)
 *               {
 *                 false면 조건문3 수행
 *               }
 *               .
 *               .
 *               .
 *               else
 *               {
 *                      // 생략이 가능
 *                      해당 조건이 없는 경우 처리하는 문장
 *               }
 *               
 *               예) 
 *               <단일조건문>
 *               int score=80;
 *               if(score>=90); //1
 *                A
 *               if(score>=80); //2
 *                B
 *               if(score>=70); //3
 *                C
 *               if(score>=60); //4
 *                D
 *               if(score<60); //5
 *                F
 *               ====> D학점이 출력됨 : 80점은 4번 범위까지 포함됨 (단일조건문은 모든 문장 수행되기 때문에) => 범위 지정해주면 가능하긴 함
 *               
 *               <다중조건문>
 *               int a=15;
 *               if(a%3==0); //1
 *               else if(a%5==0); //2
 *               else if(a%7==0); //3
 *               =====> 1,2가 출력되어야하는데 1만 수행하고 빠져나감 => 단일조건문으로 수행해줘야함 (중복)
 *               
 *                
 *      = 선택문
 *      = 반복문
 *      = 반복제어문
 */
// 단일 조건문 : 조건식 (비교연산자, 논리연산자, 부정연산자)
// 1. 정수 한개를 입력받아서 짝/홀 나타내어라

import java.util.Scanner;
public class 제어문의종류 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
        // Scanner는 클래스 => 키보드 입력해서 저장 => 엔터 메모리에 저장
		/*
		 *  기능 (메소드) 
		 *  정수 : nextInt()
		 *  문자열 : next()
		 *  실수 : nextDouble()
		 *  논리 : nextBoolean()
		 *  문자는 X ==> System.in => 문자가 아닌 정수로 들어온다 ( A =>65 ) ==> 무조건 형변환을 해줘야함 => 번거로워 잘 사용 X
		 *  웹 / 윈도우 (char는 더이상 사용 X)
		 */
	 //Scanner 클래스 저장 => 클래스 저장 (new 반드시 붙여주기)
		
		Scanner scan=new Scanner(System.in);
		// System.in / System.out => 자바의 표준 입출력
		System.out.print("정수 입력:");
		
		int num=scan.nextInt();
		// 가공
		if(num%2==0)
		{
			System.out.println(num+"는(은) 짝수입니다");
		}
		if(num%2!=0) // num%2==1 , !(num%2==0)
		{
			System.out.println(num+"는(은) 홀수입니다");
		}
		
		
	}

}
