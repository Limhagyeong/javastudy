package com.sist.exception;
/*
 *  묶는 기술 => 객체지향 (누가 더 잘 묶어서 사용하는가!) => 재사용을 위함
 *  
 *  1. 변수 묶는 방법
 *     = 배열 => 같은 데이터형으로 묶음 (메모리 크기가 동일 => 연속적인 메모리 구조)
 *              => 인덱스 이용
 *     = 클래스 => 다른 데이터형 (메모리 주소 (.))
 *  2. 연산자 / 제어문 묶기
 *     = 메소드 (명령문을 묶어서 사용)
 *     --------------------------------------- 한개의 기능 => 부품 (컴퍼넌트)
 *     ==> 조립 : 한개의 프로그램
 *     ==> 게시판 , 회원, 맛집, 채팅, 예약, 추천,결제
 *         --------------------------------- => 모으면 맛집 사이트!
 *         기능 만들어뒀다가 필요할 때 사용 => 재사용
 *         => 영화 사이트 제작 : 게시판, 회원 => 재사용
 *                          extends 예약, 추천, 결제 => 재사용 및 수정 => 오버라이딩
 *    ---------------------------------------------------------------------------
 *     << 프로그램 구성 3대 형식>>
 *     1) 가독성
 *     2) 최적화 (빠른 속도) => Vue,React
 *     3) 견고성 (견고한 프로그램) => 예외처리
 *     ---------------------------------------------------------------------------
 *     1. 테스트 : 견고한 프로그램 => 사전에 에러 방지하는 프로그램
 *                              ----- 에러 예측이 중요
 *                              => 예외처리
 *        견고 => 프로그래머의 실수, 사용자 입력이 잘못된 경우
 *        -----------------------------------------
 *     2. 예외처리 
 *        => 정의 : 사전에 에러를 방지하는 프로그램
 *        => 목적 : 비정상 종료를 방지하고 정상 종료를 할 수 있게 만든다
 *        -----
 *        -----
 *        ----- 에러 => 건너뛴다 => catch => 에러수정을 위한 확인
 *                                        에러를 복구
 *        -----
 *        -----
 *        
 *        => 예외처리
 *           1) 에러 복구 => try~catch
 *           2) 에러 무시  => 에러 회피 => throws
 *           3) 견고한 프로그램
 *              ----------- 에러를 발생시켜본다 (임의발생) => throw
 *           4) 프로그램은 항상 ..... 
 *              모든 것을 지원하지 않는다
 *              => 사용자 정의 ex) 예약, 추천 ..
 *              => 사용자 정의 데이터형 => Music, Movie ...
 *                 => 기존의 데이터형을 모아서 새로운 데이터형을 만들어라
 *                    => class
 *              => 사용자 정의 메소드 => 연산자, 제어문을 이용해서 만들어라
 *              => 사용자 정의 예외 처리 => 별도의 예외처리 필요
 *            ---------------------------------------------------
 *            결제모듈 ==> 보안 처리 ==> 데이터베이스 
 *            ------------------------------- 
 *            | 솔루션 업체 ==> 개발자, 유지보수, < 영업, 운영 ...
 *        
 *       => 예외복구 
 *          형식)
 *                try
 *                {
 *                   => 정상적으로 수행할 수 있는 명령문
 *                   => 평상시 코딩
 *                   문장 1
 *                   문장 2
 *                   문장 3
 *                   문장 4
 *                   문장 5
 *                }catch(Exception e=> 예외처리 클래스)
 *                {
 *                   => try 안에 있는 명령문에서 요류 발생 시에
 *                      예외 처리 or 복구해주는 역할
 *                }  => catch는 여러개 사용이 가능하다
 *                finally => 필요한 경우에만 사용
 *                {
 *                   => try,catch를 수행하든 관계 없이 무조건 수행하는 문장
 *                   => 1) 서버 닫기
 *                      2) 오라클 닫기
 *                      3) 파일 닫기
 *                }
 *                
 *           실행)
 *                
 *                문장 1
 *                문장 2 => 에러
 *                try
 *                {
 *                  문장 3
 *                  문장 4
 *                  문장 5
 *                }catch(Exception e)
 *                {
 *                  문장 6
 *                }
 *                finally
 *                {
 *                  문장 7
 *                }
 *                문장 8 ==> 종료
 *                
 *                => 1번 실행 후 비정상 종료
 *  -------------------------------------------------------------              
 *                문장 1
 *                문장 2
 *                try
 *                {
 *                  문장 3
 *                  문장 4
 *                  문장 5
 *                }catch(Exception e)
 *                {
 *                  문장 6
 *                }
 *                finally
 *                {
 *                  문장 7
 *                }
 *                문장 8 ==> 종료
 *                
 *                => try가 정상이면 1 => 2=> 3=> 4=> 5=> 7=> 8 => 종료
 *                   (catch는 수행하지 않음)
 * ----------------------------------------------------------------
 *                문장 1
 *                문장 2 
 *                try
 *                {
 *                  문장 3
 *                  문장 4 => 에러
 *                  문장 5
 *                }catch(Exception e)
 *                {
 *                  문장 6
 *                }
 *                finally
 *                {
 *                  문장 7
 *                }
 *                문장 8 ==> 종료
 *                
 *                => 1 => 2=> 3 => 6 => 7=> 8 => 종료
 *                   (에러 발생 여부와 상관 없이 7번은 무조건 수행)
 * ----------------------------------------------------------------               
 *                try
 *                {
 *                  문장 1
 *                  문장 2 ==> C에러 발생
 *                  문장 3
 *                      |  int[] arr=new int[2];
 *                         arr[2]=Integer.parseInt(" 10");
 *                                -------------------------- 우선순위 에러 잡은 후 종료
 *                         => 인덱스 범위 오류, 공백 사용 => but, 한개의 오류만 잡아내고 finally로 이동함
 *                }catch(A) <<else if와 동일한 문장으로 이해하면 쉬움>>
 *                {
 *                  A에 대한 에러 복구 => finally 이동
 *                }     |
 *                catch(B)
 *                {
 *                  B에 대한 에러 복구 => finally 이동
 *                }     |
 *                catch(C)
 *                {
 *                  C에 대한 에러 복구 => finally 이동
 *                }
 *                finally
 *                {
 *                  닫기
 *                }
 *                
 *                catch는 해당 영역에 한번만 수행하고 catch절 종료시킨다
 *                => 2개의 에러가 있어도 한개만 잡음
 *                
 *  *** typescript / Docker
 *  -------------------------------------------------------------------------
 *            
 *                           
 */
import java.io.*;
public class MainClass_2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
        FileReader fr=null; // 무조건!
		try
		{
			fr=new FileReader("c:\\javaDev\\movie.txt");
			//String data=""; // Ajax
			StringBuffer sb=new StringBuffer(); // => 속도가 빠르다 (Vue, React) => VueJax
			int i=0;
			while((i=fr.read())!=-1)
			{
				//data+=(char)i;
				sb.append((char)i);
			}
			System.out.println(sb.toString());
		}catch(IOException e)
		{
			// 오류 발생 ==> 에러 확인
			/*
			 *  getMessage() => 에러 메세지만 보여줌 => null
			 *  printStackTrace() => 권장
			 *        -----------
			 *        | 실행 => 순서 => 멈춘다 ==> 에러 위치 파악이 가능
			 */
			e.printStackTrace();
		}
		finally // 파일은 무조건 닫아줘야하기때문에 필요 => 선택적으로 사용
		{
			try
			{
				fr.close();
			}catch(IOException e)
			{
				
			}
		}
		
	}

}









