/*
 *     데이터 저장  =====> 데이터 가공(처리) =====> 가공된 데이터 출력
 *                           |               사용자 요청
 *                          사용자 요청 처리 => 로그인, 검색 결과
 *         |                 |
 *         |              1) 연산자
 *         |              2) 제어문
 *         |             ------------ 묶어서 사용
 *         |             ------------ 명령문의 집합 : 메소드 => 기능별 처리                
 *      데이터 한개 저장 : 변수 (지역변수, 전역변수 => 공유변수, 객체변수)
 *                          -----   -----------------------> 클래스 안에서 사용!\
 *      데이터 묶어서 사용 : 같은 데이터형을 묶어서 관리
 *      ------------- 변수명 통일 (인덱스) => 배열
 *      ------------- 다른 데이터형을 묶어서 관리 (클래스)
 *      
 *      메소드 (Method) => 클래스의 구성 요소
 *                             |
 *                            생성자, 변수, 메소드
 *       1) 사용목적 => 1. 가독성, 2. 재사용성, 3. 속도 (최적화)
 *                   --------------------
 *                            |
 *                          메소드 
 *          = 분석(가독성)이 용이하도록 함 => 수정 (유지보수), 오류처리 쉽도록
 *            기능별 분리 (로그인처리, 회원가입, 목록출력, 페이지 나누기...)
 *          = 다른 클래스와의 연결 (메세지)
 *            객체지향 프로그램은 여러개의 클래스를 만들어서 연관관계...
 *            => Scanner ... (사용자 정의 클래스)
 *               scan.nextInt() => 입력된 정수를 읽어오는 메소드
 *               System.out.ptintln() => 화면 출력
 *               trim() , length() => 공백, 길이 출력
 *               ==> 메소드는 한가지 기능만 수행이 가능하게 만든다
 *                   1) 입력
 *                   2) 요청 처리 => 기능에 따라 세분화 될 수 있다 (여러개의 메소드 제작 가능)
 *                   3) 출력
 *          = 반복수행을 제거
 *            오라클 연결
 *            --------
 *             = 목록 출력 
 *               오라클 연결 ====
 *               데이터 처리 =====>구간 반복
 *               오라클 닫기 ====
 *               
 *             = 데이터 저장
 *             오라클 연결
 *               데이터 처리
 *               오라클 닫기
 *               
 *             = 데이터 수정
 *             오라클 연결
 *               데이터 처리
 *               오라클 닫기
 *               
 *             = 데이터 삭제
 *             오라클 연결
 *               데이터 처리
 *               오라클 닫기
 *               
 *             = 상세보기
 *                오라클 연결
 *               데이터 처리
 *               오라클 닫기  
 *               
 *          = 재사용이 높다
 *          = 구조적인 프로그램을 짤 수 있다 => 단락을 나눠서 작업
 *     2) 메소드 형식
 *       [접근지정어]  [옵션] 리턴형 메소드명(매개변수...) : 선언부
 *       public(공개) static : new를 사용하지 않고 자동으로 메모리에 저장이 가능하도록 함
 *       private     abstract : 선언 => 추상 클래스 / 인터페이스 (설계)
 *                              => 요구사항 분석 시 
 *       default     final : 상속(수정) 불가능
 *                           => Math, String, System...
 *       protected
 *       {
 *         구현부
 *       }
 *       
 *       리턴형 : 사용자 요청에 대한 처리 결과값
 *       매개변수 : 사용자의 요청값 ()
 *                예) 로그인 요청
 *                   -------- id, password => 요청값
 *                   아이디 찾기
 *                   ------- id => 매개변수 1개를 요청 => id에 대한 정보를 리턴형으로 돌려줌 (아이디 일치 여부)
 *                   검색
 *                   ------- 검색어
 *                   String substring (int start, int end)
 *                   ------           -------------------
 *                   리턴형             매개변수
 *                 =>  단점(일반) : 3개이상이면 묶에서 매개변수로 설정
 *                                ----- 배열, 클래스
 *       메소드명 : 식별자 (변수)
 *               = 알파벳이나 한글로 시작 (통상적으로 알파벳으로 시작)
 *               = 메소드명의 길이 제한 X
 *                 ------------------ (3~10글자 정도가 적당)
 *               = 숫자사용 가능 => 앞에 사용은 불가
 *               = 특수문자 사용 가능 => _ , $
 *               = 키워드 사용 불가
 *               = 공백 사용 불가
 *      ====> 선언부, 구현부                            
 *            리턴형 메소드명(매개변수...) => 선언부: public static void main(String[] args)
 *            {
 *               구현부
 *            }
 *            
 *            **** 약속사항
 *                  => 소문자로 시작
 *                  => 두개의 단어가 붙었을 때 뒤 단어는 대문자로 시작 or _ 넣어줌
 *                  => 데이터 저장 : set변수명()
 *                  => 데이터 읽기 : get변수명()
 *                     
 *     3) 메소드 제작 시 고민
 *        -------------------------------------------
 *         리턴형 (처리 결과값)  <---- 매개변수 (사용자 요청값)
 *                           ----->      
 *        -------------------------------------------
 *              O                  O
 *              => String replace(char c1, char c2)
 *                 -----         ------------------
 *                 리턴             매개변수
 *              => 리턴형으로 사용
 *                 ----------
 *                  기본형 : int, long, double, boolean, char
 *                  참조형 : int[], boolean[]
 *                  ------------------------
 *                   리턴형은 한개만 사용 가능
 *        -------------------------------------------
 *              O                  X
 *              => (double)Math.random()
 *              => String trim()
 *              => int nextln()
 *        -------------------------------------------
 *              X                  O
 *              => 메소드 자체 치리 => 출력
 *              void main(String[] args) => 리턴형이 없는 경우는 'void'를 앞에 붙여준다
 *              void println(String s)
 *        -------------------------------------------
 *              X                  X
 *              => System.out.println() => 다음줄에 출력 (사용빈도수 거의 없음)
 *        -------------------------------------------
 *     4) 메소드 선언 및 호출 방법 
 *        public class A
 *        {
 *          -----------------------------------
 *                    메소드 선언 위치
 *          -----------------------------------
 *          public static void main(String[] args){
 *          }
 *          -----------------------------------
 *                    메소드 선언 위치 (메소드 안에 메소드 선언은 불가능)
 *                    클래스 블록 안에서 선언 
 *          -----------------------------------
 *          자바는 메소드 클래스 종속 => 메소드
 *          클래스 밖에서 선언 => 함수 (C/C++) => 독립적 사용이 불가
 *        }
 *        
 *        형식)
 *            리턴형 메소드명(매개변수...)
 *            ----
 *            {   
 *                사용자 요청 처리
 *                return  값;
 *                       ---- => 리턴형과 일치 or 작음 (리턴형이 실제 전송값 보다 클 수도 있음)
 *            }
 *            
 *        예) int 메소드명(매개변수) 
 *            {
 *                return int,char,short,byte
 *            }
 *            
 *            ==> 호출
 *            
 *            int 메소드명(매개변수)
 *            ---
 *            {
 *               return 10;
 *            }
 *            
 *            ==> int a=매소드명(값...)
 *               ------
 *            ==> 메소드는 호출시마다 처음부터 시작한다 (return에서 종료)
 *            
 *            void 메소드명(매개변수)
 *            ---- 전송할 데이터가 없다 => 자체처리
 *            {
 *               return; => 생략가능 => 컴파일러가 자동 추가
 *               ------- 메소드의 종료
 *            }
 *            
 *            
 *     5) 메소드 응용
 *      
 *      
 */
public class 메소드_1 {
    static void a()
    {
    	System.out.println("a() start...");
    	System.out.println("a() 사용자 요청 처리 종료...");
    	System.out.println("a() end...");
    	return; // 생략가능 => 값을 보내줄 때 한개만 사용이 가능
    }
    // 시작점 (main)
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        a();
        System.out.println("=============================");
        a();
        System.out.println("=============================");
        a();
        System.out.println("=============================");
      
        
	}

}

/*
 * static int plus(int a, int b)
 *       -----
 * {
 *  return a+b;
 * }
 * 
 * int c=plus(10,20) => c = 30
 * ----      ------- int a, b에 값을 넣어줌
 */
