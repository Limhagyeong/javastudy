/*
 *  2023-09-12 / 2장
 *  1. 목표
 *     = 데이터형 (메모리 공간의 크기)
 *     = 변수 / 상수
 *     = 연산자 (가공)
 *     ------------- 제어문 / 객체지향 / 예외처리 / 클래스의 종류 / 재사용법 (is-a, has-a)
 *   1) 프로그램의 기본
 *      = 데이터 저장하는 방법
 *      = 데이터를 한개만 저장 : 변수 / 상수 , 리터럴 : 실제 저장할 값
 *                          --- 메모리 저장 공간의 별칭
 *                              ---- 주소 ( 0~...)
 *       자바의 메모리 구조 
 *       --------------
 *          method 영역 => method, static
 *        -------------
 *          stack => 지역변수, 매개변수 ==> 메모리 자체 관리
 *        -------------
 *          heap => 클래스 블록 ==> 사용자가 관리하는 영역 (자동 메모리 회수 : 가비지컬렉션)
 *        -------------
 *        
 *        프로그램 => 데이터 관리 (Vue, React => 데이터 관리) 
 *        
 *        실제 메모리 (RAM) => 휘발성 => 프로그램이 종료되면 저장된 데이터가 사라짐 
 *          
 *          100을 저장
 *        0--------
 *          사용중
 *        4--------
 *          사용중
 *        8---------
 *           100 ==> 이름 부여 : a (변수)
 *        12--------
 *       
 *        16---------
 *        
 *        20---------
 *          --
 *          --
 *          --
 *         메모리 크기 => 속도 
 *         
 *     => 자바에서 제공하는 메모리 크기(자료형, 데이터형)
 *        정수
 *        
 *         byte => 1byte (8bit) => 0, 1을 8 저장하는 공간 (-128~127까지 저장가능)
 *         ------------------------------------------
 *          부호 |    |    |    |    |   |     |     |
 *         ------------------------------------------
 *           |         
 *         부호: 양수(0) / 음수(1)
 *         
 *         01111111
 *         --------
 *                2^0*1 = 1 
 *                2^1*1 = 2
 *                2^2*1 = 4
 *                -- = 8
 *                -- =16
 *                -- =32
 *                2^7*1 = 64
 *                -------------- 127까지 저장 가능
 *        음수 표현 시, 2의 보수        1
 *                               -----
 *                               -128까지 저장 가능  
 *         => 주 사용처 
 *            파일 읽기, 파일 전송. 파일 쓰기. 다운로드 시 사용
 *            
 *         short : 16bit(2byte) => c언어 호환성
 *                => 사용빈도 낮음 (-32768~32767까지 저장 가능)
 *        --------------------------------------------------        
 *         int : 4byte => 일반적인 모든 숫자는 int로 계산됨 (가장 사용 빈도 높음)
 *                     => default
 *         long : 8byte(64nbit)
 *                빅데이터 / 금융권 
 *        ----------------------------
 *        L (1) => 100L(long) 100(int)
 *        
 *        실수
 *          float: 4byte
 *          double : 8byte => default
 *              10.5(double) , 10.5F (f)
 *              ------------------------ 10.5d (D)
 *        문자 : char => 2byte (멀티 바이트)
 *              ---------------------
 *              1byte(아스키), 2byte(Unicode)
 *                            --------------
 *                  |                |
 *                 C/C++            자바
                   =>범위 (0~256)    (0~65535)
                   =>한글 (자음+모음) => 한글자당 2byte (크기가 커서 깨질 가능성 있음) => UTF-8
                   
 *        논리  : boolean (1byte) => true/false
 *               => 조건문
 *     ------------------------------  
 *      참조형(사용자 정의) : 배열, 클래스
 *     ------------------------------
 *     => 자바 : 대소문자 구분, 명령이 끝나면 ; 
 */
public class 자바데이터형 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
        System.out.println('A'+1);
	}

}
